import { GetServerSidePropsContext, GetServerSidePropsResult } from 'next';
import ReactMarkdown from 'react-markdown';
import { BlogPost, getBlogPostById } from '../../database/blogPosts';
import { CommonContent } from './common';

type Props =
  | {
      error: string;
    }
  | {
      blogPost: BlogPost;
    };

export default function MissingAuthenticationGssp(props: Props) {
  return (
    <div>
      <CommonContent {...props} />
      {'blogPost' in props && (
        <>
          <h2>{props.blogPost.title}</h2>
          <div>Published: {String(props.blogPost.isPublished)}</div>

          {/* be careful which markdown library you use and how you use it
          by default the markdown standard supports html tags too
          so never assign markdown directly to innerHTML
          but the default usage of "ReactMarkdown" is safe */}
          <ReactMarkdown children={props.blogPost.textContent} />
        </>
      )}
    </div>
  );
}

export async function getServerSideProps(
  context: GetServerSidePropsContext,
): Promise<GetServerSidePropsResult<Props>> {
  // Different blog post text_content including Markdown
  const blogPost = await getBlogPostById(7);

  if (!blogPost) {
    context.res.statusCode = 404;
    return {
      props: {
        error: 'Blog post not found',
      },
    };
  }

  return {
    props: {
      blogPost: blogPost,
    },
  };
}
